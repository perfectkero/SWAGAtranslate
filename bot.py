import logging
import os
from dotenv import load_dotenv

from google import genai
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from typing import Optional, List

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

gemini_client: Optional[genai.Client] = None
SELECTED_GEMINI_MODEL = "gemini-2.0-flash" # –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç-–∂–µ 2.0-flash, –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤

ACTIVE_MODES = {
    "slang_to_standard_russian": {
        "button_text": "–°–ª–µ–Ω–≥ üß¢ ‚Üí –ü–æ–Ω—è—Ç–Ω–æ üßê",
        "gemini_prompt": "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ–±—ä—è—Å–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–º –º–æ–ª–æ–¥–µ–∂–Ω–æ–º —Å–ª–µ–Ω–≥–µ, –ø—Ä–æ—Å—Ç—ã–º, —è—Å–Ω—ã–º –∏ –æ–±—â–µ–ø–æ–Ω—è—Ç–Ω—ã–º –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–º —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º. –ì–ª–∞–≤–Ω–æ–µ ‚Äî —Å–¥–µ–ª–∞—Ç—å —Å–º—ã—Å–ª –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞, –Ω–µ –∑–Ω–∞–∫–æ–º–æ–≥–æ —Å–æ —Å–ª–µ–Ω–≥–æ–º. –°–æ—Ö—Ä–∞–Ω–∏ –∏—Å—Ö–æ–¥–Ω—É—é –º—ã—Å–ª—å –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å. –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –∑–≤—É—á–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –≥—Ä–∞–º–æ—Ç–Ω–æ."
    },
    "standard_russian_to_slang": {
        "button_text": "–ü–æ–Ω—è—Ç–Ω–æ üßê ‚Üí –°–ª–µ–Ω–≥ üß¢",
        "gemini_prompt": "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–æ–ª–æ–¥–µ–∂–Ω—ã–π —Å–ª–µ–Ω–≥ (–¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏ 16-25 –ª–µ—Ç). –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º, –∂–∏–≤—ã–º, –¥–æ–±–∞–≤—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–µ—á–∫–∏ –∏ –æ–±–æ—Ä–æ—Ç—ã. –í–∞–∂–Ω–æ —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Å–º—ã—Å–ª –≤ —Å–ª–µ–Ω–≥–æ–≤–æ–π –º–∞–Ω–µ—Ä–µ."
    }
}


async def translate_text_with_gemini(text_to_translate: str, mode_key: str) -> str | None:
    if not gemini_client:
        logger.critical("–ö–ª–∏–µ–Ω—Ç Gemini –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–≤–æ–¥–∞.")
        return None
    mode_info = ACTIVE_MODES.get(mode_key)
    if not mode_info:
        logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∂–∏–º: {mode_key}")
        return None

    specific_task_description = mode_info["gemini_prompt"]

    prompt = f"""–¢—ã ‚Äî –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥–µ –º–µ–∂–¥—É —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ä—É—Å—Å–∫–∏–º –º–æ–ª–æ–¥–µ–∂–Ω—ã–º —Å–ª–µ–Ω–≥–æ–º –∏ –æ–±—â–µ–ø–æ–Ω—è—Ç–Ω—ã–º –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–º —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º.
{specific_task_description}

–í–∞–∂–Ω–æ:
- –°–æ—Ö—Ä–∞–Ω—è–π –æ—Å–Ω–æ–≤–Ω–æ–π —Å–º—ã—Å–ª –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
- –ê–¥–∞–ø—Ç–∏—Ä—É–π –ª–µ–∫—Å–∏–∫—É, –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥ —Ü–µ–ª–µ–≤–æ–π —Å—Ç–∏–ª—å.
- –í—ã–¥–∞–≤–∞–π **—Ç–æ–ª—å–∫–æ** –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ —Å–≤–æ–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π, –∏–∑–≤–∏–Ω–µ–Ω–∏–π, –æ–±—ä—è—Å–Ω–µ–Ω–∏–π —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.

–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:
"{text_to_translate}"

–†–µ–∑—É–ª—å—Ç–∞—Ç (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç):"""

    try:
        response = await gemini_client.aio.models.generate_content(
            model=SELECTED_GEMINI_MODEL,
            contents=prompt
        )
        if response and response.text:
            return response.text.strip()
        else:
            logger.error(f"Gemini –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç. Feedback: {getattr(response, 'prompt_feedback', 'N/A')}")
            return None
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini API: {e}", exc_info=True)
        return None


def build_translation_mode_keyboard() -> InlineKeyboardMarkup:
    keyboard_row: List[InlineKeyboardButton] = [
        InlineKeyboardButton(details["button_text"], callback_data=f"mode_{key}")
        for key, details in ACTIVE_MODES.items()
    ]
    return InlineKeyboardMarkup([keyboard_row])


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message:
        user = update.effective_user
        await update.message.reply_html(
            f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è –ø–æ–º–æ–≥—É –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ–≥–æ —Å–æ —Å–ª–µ–Ω–≥–∞ –Ω–∞ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫ –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç. üìùüîÑ"
        )
        context.user_data.clear()


async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.text: return

    context.user_data['original_text'] = update.message.text
    reply_markup = build_translation_mode_keyboard()
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=reply_markup)


async def handle_mode_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if not query or not query.data or not query.message: return
    await query.answer()

    mode_key = query.data[len("mode_"):]
    if mode_key not in ACTIVE_MODES:
        await query.edit_message_text("üòï –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º.", reply_markup=None)
        return

    selected_mode_button_text = ACTIVE_MODES[mode_key]["button_text"]
    original_text = context.user_data.pop('original_text', None)

    if not original_text:
        await query.edit_message_text("üòï –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.",
                                      reply_markup=None)
        return

    await query.edit_message_text(
        text=f"–ü–µ—Ä–µ–≤–æ–∂—É: \"{selected_mode_button_text}\". –ü–æ–¥–æ–∂–¥–∏—Ç–µ... ‚è≥",
        reply_markup=None
    )

    translated_text = await translate_text_with_gemini(original_text, mode_key)

    if translated_text:
        result_message = f"üßê *–†–µ–∑—É–ª—å—Ç–∞—Ç*:\n\n{translated_text}\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                         f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ."
        await query.edit_message_text(text=result_message, parse_mode='Markdown', reply_markup=None)
    else:
        error_message = f"üòï –£–ø—Å! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Ä–µ–∂–∏–º–µ ¬´{selected_mode_button_text}¬ª."
        await query.edit_message_text(text=error_message, reply_markup=None)


def main() -> None:
    global gemini_client
    if not TELEGRAM_BOT_TOKEN:
        logger.critical("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ó–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        return
    if not GEMINI_API_KEY:
        logger.critical("GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω! –ó–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        return

    try:
        gemini_client = genai.Client(api_key=GEMINI_API_KEY)
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ Gemini: {e}", exc_info=True)
        return

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    application.add_handler(CallbackQueryHandler(handle_mode_selection, pattern="^mode_"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    application.run_polling()


if __name__ == "__main__":
    main()